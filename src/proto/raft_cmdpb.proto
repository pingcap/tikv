syntax = "proto2";
package raft_cmdpb;

import "metapb.proto";
import "errorpb.proto";
import "raftpb.proto";

message GetRequest {
    optional bytes key = 1;
}

message GetResponse {
    optional bytes value = 1;
}

message SeekRequest {
    optional bytes key = 1;
}

message SeekResponse {
    optional bytes key   = 1;
    optional bytes value = 2;
}

message PutRequest {
    optional bytes key   = 1;
    optional bytes value = 2;
}

message PutResponse {
    
}

message DeleteRequest {
    optional bytes key = 1;
}

message DeleteResponse {
    
}

enum CommandType {
    Invalid     = 0;
    Get         = 1;
    Seek        = 2;
    Put         = 3;
    Delete      = 4;
}

message Request {
    optional CommandType cmd_type      = 1;
    optional GetRequest get            = 2;
    optional SeekRequest seek          = 3;
    optional PutRequest put            = 4;
    optional DeleteRequest delete      = 5;
}

message Response {
    optional CommandType cmd_type      = 1;
    optional GetResponse get           = 2;
    optional SeekResponse seek         = 3;
    optional PutResponse put           = 4;
    optional DeleteResponse delete     = 5;
}

message ChangePeerRequest {
    optional raftpb.ConfChangeType change_type = 1;
    optional metapb.Peer peer                  = 2;
}

message ChangePeerResponse {
    optional metapb.Region region = 1;
}

message SplitRequest {
    // The split_key must be in the been splitting region. 
    // If the split_key is none, we will choose a proper key
    // to split the region in half.
    optional bytes split_key       = 1;
    // We split the region into two, first uses the origin 
    // parent region id, and the second uses the new_region_id.
    // We must guarantee that the new_region_id is global unique.
    optional uint64 new_region_id  = 2;
    // The peer ids for the new split region. 
    repeated uint64 new_peer_ids   = 3;
}

message SplitResponse {
    optional metapb.Region left  = 1;
    optional metapb.Region right = 2;
}

message CompactLogRequest {
    optional uint64 compact_index = 1;
}

message CompactLogResponse {
    
}

enum AdminCommandType {
    InvalidAdmin    = 0;
    ChangePeer      = 1;
    Split           = 2;
    CompactLog      = 3;
}

message AdminRequest {
    optional AdminCommandType cmd_type      = 1;
    optional ChangePeerRequest change_peer  = 2;
    optional SplitRequest split             = 3;
    optional CompactLogRequest compact_log  = 4;
}

message AdminResponse {
    optional AdminCommandType cmd_type      = 1;
    optional ChangePeerResponse change_peer = 2;
    optional SplitResponse split            = 3;
    optional CompactLogResponse compact_log = 4;  
}

message RegionLeaderRequest {
    
}

message RegionLeaderResponse {
    optional metapb.Peer leader 	= 1;
    optional uint64 current_term 	= 2;
}

enum StatusCommandType {
    InvalidStatus    = 0;
    RegionLeader     = 1;
}

message StatusRequest {
    optional StatusCommandType cmd_type           = 1;
    optional RegionLeaderRequest region_leader    = 2;
}

message StatusResponse {
    optional StatusCommandType cmd_type           = 1;
    optional RegionLeaderResponse region_leader   = 2;
    optional uint64 current_term		  = 3;
}

message RaftRequestHeader {
    optional uint64 region_id          = 1;
    optional metapb.Peer peer          = 2;
    // true for read linearization
    optional bool read_quorum          = 3;
    // 16 bytes, to distinguish request.  
    optional bytes uuid                = 4;
}

message RaftResponseHeader {
    optional errorpb.Error error  = 1;
    optional bytes uuid           = 2;
}

message RaftCommandRequest {
    optional RaftRequestHeader header     = 1;
    // We can't enclose normal requests and administrator request
    // at same time. 
    repeated Request requests             = 2; 
    optional AdminRequest admin_request   = 3; 
    optional StatusRequest status_request = 4;
}

message RaftCommandResponse {
    optional RaftResponseHeader header      = 1;
    repeated Response responses             = 2;
    optional AdminResponse admin_response   = 3;
    optional StatusResponse status_response = 4;
}
