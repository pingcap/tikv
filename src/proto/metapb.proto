syntax = "proto2";
package metapb;

message Cluster {
    optional uint64 cluster_id     = 1;
    // max peer number for a region.
    // pd will do the auto-balance if region peer number mismatches.
    optional uint32 max_peer_number = 2; 
    // more attributes......
}

message Node {
    optional uint64 node_id = 1;
    optional string address = 2;
    // more attributes......
}


message Store {
    optional uint64 store_id  = 1;
    optional uint64 node_id   = 2;
    // more attributes......
}

message Peer {
    optional uint64 peer_id   = 1;
    optional uint64 node_id   = 2;
    optional uint64 store_id  = 3;
}

message Region {
    optional uint64 region_id   = 1;
    // Region key range [start_key, end_key).
    optional bytes start_key    = 2;
    optional bytes end_key      = 3;
    repeated Peer peers         = 4;

    // The peer id is generated by outer placement driver incrementally, 
    // and we can guarantee that the next generated one is larger than
    // the max_peer_id.
    // If we receive a message which the peer is not in region peers
    // and the peer id is <= max_peer_id, we can be sure that the 
    // peer which sends this message is a tombstone peer and can 
    // skip the message directly.   
    optional uint64 max_peer_id = 5;
}
