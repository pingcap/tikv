syntax = "proto2";
package kvrpcpb;

enum MessageType {
    CmdGet = 1;
    CmdScan = 2;
    CmdPrewrite = 3;
    CmdCommit = 4;
    CmdCleanup = 5;
    // Below types both use for Get failed. If Get failed, it may be locked.
    // So it tries to clean primary lock(CmdCleanup), and then server will return
    // either committed or rollbacked. Finally, client will commit/rollback
    // primary lock and THEN Get again.
    CmdRollbackThenGet = 6;
    CmdCommitThenGet = 7;
}

enum ResultType {
    Ok = 1;
    Retryable = 2;
    Locked = 3;
}

message KvPair {
    optional bytes key = 1;
    optional bytes value = 2;
}

message CmdGetRequest {
    optional bytes key = 1;
    optional uint64 version = 2;
}

message CmdGetResponse {
    optional ResultType res_type = 1 [default = Ok];
    optional bytes value = 2;
    optional bytes primary_lock = 3;
    optional uint64 lock_version = 4;
}

message CmdScanRequest {
    optional bytes key = 1;
    optional uint32 limit = 2;
    optional uint64 version = 3;
}

message CmdScanResponse {
    // ok if !ok then retry.
    optional bool ok = 1;
    message Item {
        // ok if !ok the key must be locked and need clean it up.
        optional ResultType res_type = 1 [default = Ok];
        optional bytes key = 2;
        optional bytes value = 3;
        // primary_lock_key
        optional bytes primary_lock = 4;
        optional uint64 lock_version = 5;
    }
    repeated Item results = 2;
}

message CmdPrewriteRequest {
    repeated KvPair puts = 1;
    repeated bytes dels = 2;
    repeated bytes locks = 3;
    // primary_lock_key
    optional bytes primary_lock = 4;
    optional uint64 start_version = 5;
}

message CmdPrewriteResponse {
    optional bool ok = 1;
    message Item {
        optional ResultType res_type = 1 [default = Ok];
        optional bytes key = 2;
        // primary_lock_key
        optional bytes primary_lock = 3;
        optional uint64 lock_version = 4;
    }
    repeated Item results = 2;
}

message CmdCommitRequest {
    optional uint64 start_version = 1;
    repeated bytes keys = 2;
    optional uint64 commit_version = 3;
}

message CmdCommitResponse {
    optional bool ok = 1;
}

message CmdCleanupRequest {
    optional bytes key = 1;
    optional uint64 start_version = 2;
}

message CmdCleanupResponse {
    enum ResultType {
        Ok = 1;
        Retryable = 2;
        Committed = 3;
        Rollbacked = 4;
    }
    optional ResultType res_type = 1;
    optional uint64 commit_version = 2;
}

message CmdRollbackThenGetRequest {
    optional bytes key = 1;
    optional uint64 lock_version = 2;
}

message CmdRollbackThenGetResponse {
    optional bool ok = 1;
    optional bytes value = 2;
}

message CmdCommitThenGetRequest {
    optional bytes key = 1;
    optional uint64 lock_version = 2;
    optional uint64 commit_version = 3;
    optional uint64 get_version = 4;
}

message CmdCommitThenGetResponse {
    optional bool ok = 1;
    optional bytes value = 2;
}

message Request {
    optional MessageType type = 1;
    optional CmdGetRequest cmd_get_req = 2;
    optional CmdScanRequest cmd_scan_req = 3;
    optional CmdPrewriteRequest cmd_prewrite_req = 4;
    optional CmdCommitRequest cmd_commit_req = 5;
    optional CmdCleanupRequest cmd_cleanup_req = 6;
    optional CmdRollbackThenGetRequest cmd_rb_get_req = 7;
    optional CmdCommitThenGetRequest cmd_commit_get_req = 8;
}

message Response {
    optional MessageType type = 1;
    optional CmdGetResponse cmd_get_resp = 2;
    optional CmdScanResponse cmd_scan_resp = 3;
    optional CmdPrewriteResponse cmd_prewrite_resp = 4;
    optional CmdCommitResponse cmd_commit_resp = 5;
    optional CmdCleanupResponse cmd_cleanup_resp = 6;
    optional CmdRollbackThenGetResponse cmd_rb_get_resp = 7;
    optional CmdCommitThenGetResponse cmd_commit_get_resp = 8;
}
