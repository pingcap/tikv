// Copyright 2018 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

//! Profile a part of the code using CPU Profiler from gperftools or Callgrind.
//!
//! ## Requirements
//!
//! 1. Linux
//!
//!    Other OS may also work however, not tested.
//!
//! 2. gperftools
//!
//!    You can follow its [INSTALL manual](https://github.com/gperftools/gperftools/blob/master/INSTALL).
//!    Roughly the instructions are the following:
//!
//!    1. Download packages from [release](https://github.com/gperftools/gperftools/releases)
//!    2. Run `./configure`
//!    3. Run `make install`
//!
//! ## Usage
//!
//! ```ignore
//! profiler::start("./app.profile");
//! some_complex_code();
//! profiler::stop();
//! ```
//!
//! Then, compile the code with `profiling` feature enabled and run the code with environment
//! variable `TIKV_PROFILE=1`.
//!
//! By default, a profile called `app.profile` will be generated by CPU Profiler.
//! You can then analyze the profile using [pprof](https://github.com/google/pprof).
//!
//! If the application is running in Callgrind, a Callgrind profile dump will be generated instead.
//! Notice that you should run Callgrind with command line option `--instr-atstart=no`, e.g.:
//!
//! ```bash
//! TIKV_PROFILE=1 valgrind --tool=callgrind --instr-atstart=no ./my_example
//! ```
//!
//! Also see `examples/prime.rs`.

// TODO: Simplify these using Edition 2018.

#[cfg(all(target_os = "linux", feature = "profiling"))]
#[macro_use]
extern crate lazy_static;

#[cfg(all(target_os = "linux", feature = "profiling"))]
extern crate cpuprofiler;

#[cfg(all(target_os = "linux", feature = "profiling"))]
extern crate valgrind_request;

#[cfg(all(target_os = "linux", feature = "profiling"))]
extern crate callgrind;

#[cfg(all(target_os = "linux", feature = "profiling"))]
mod profiler_linux;

#[cfg(all(target_os = "linux", feature = "profiling"))]
pub use profiler_linux::*;

#[cfg(not(all(target_os = "linux", feature = "profiling")))]
mod profiler_dummy;

#[cfg(not(all(target_os = "linux", feature = "profiling")))]
pub use profiler_dummy::*;
